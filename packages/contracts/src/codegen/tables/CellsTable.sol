// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

// Import user types
import { ElementType } from "./../Types.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("CellsTable")));
bytes32 constant CellsTableTableId = _tableId;

struct CellsTableData {
  uint16 x;
  uint16 y;
  ElementType cType;
  bool isRented;
  uint256 startAt;
  uint256 endAt;
}

library CellsTable {
  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](6);
    _schema[0] = SchemaType.UINT16;
    _schema[1] = SchemaType.UINT16;
    _schema[2] = SchemaType.UINT8;
    _schema[3] = SchemaType.BOOL;
    _schema[4] = SchemaType.UINT256;
    _schema[5] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "cellId";
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](6);
    fieldNames[0] = "x";
    fieldNames[1] = "y";
    fieldNames[2] = "cType";
    fieldNames[3] = "isRented";
    fieldNames[4] = "startAt";
    fieldNames[5] = "endAt";
  }

  /** Register the table's key schema, value schema, key names and value names */
  function register() internal {
    StoreSwitch.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table's key schema, value schema, key names and value names (using the specified store) */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Get x */
  function getX(uint256 cellId) internal view returns (uint16 x) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Get x (using the specified store) */
  function getX(IStore _store, uint256 cellId) internal view returns (uint16 x) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Set x */
  function setX(uint256 cellId, uint16 x) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((x)), getValueSchema());
  }

  /** Set x (using the specified store) */
  function setX(IStore _store, uint256 cellId, uint16 x) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((x)), getValueSchema());
  }

  /** Get y */
  function getY(uint256 cellId) internal view returns (uint16 y) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Get y (using the specified store) */
  function getY(IStore _store, uint256 cellId) internal view returns (uint16 y) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (uint16(Bytes.slice2(_blob, 0)));
  }

  /** Set y */
  function setY(uint256 cellId, uint16 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((y)), getValueSchema());
  }

  /** Set y (using the specified store) */
  function setY(IStore _store, uint256 cellId, uint16 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((y)), getValueSchema());
  }

  /** Get cType */
  function getCType(uint256 cellId) internal view returns (ElementType cType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2, getValueSchema());
    return ElementType(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get cType (using the specified store) */
  function getCType(IStore _store, uint256 cellId) internal view returns (ElementType cType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2, getValueSchema());
    return ElementType(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set cType */
  function setCType(uint256 cellId, ElementType cType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(cType)), getValueSchema());
  }

  /** Set cType (using the specified store) */
  function setCType(IStore _store, uint256 cellId, ElementType cType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(cType)), getValueSchema());
  }

  /** Get isRented */
  function getIsRented(uint256 cellId) internal view returns (bool isRented) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3, getValueSchema());
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get isRented (using the specified store) */
  function getIsRented(IStore _store, uint256 cellId) internal view returns (bool isRented) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3, getValueSchema());
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set isRented */
  function setIsRented(uint256 cellId, bool isRented) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((isRented)), getValueSchema());
  }

  /** Set isRented (using the specified store) */
  function setIsRented(IStore _store, uint256 cellId, bool isRented) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((isRented)), getValueSchema());
  }

  /** Get startAt */
  function getStartAt(uint256 cellId) internal view returns (uint256 startAt) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4, getValueSchema());
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get startAt (using the specified store) */
  function getStartAt(IStore _store, uint256 cellId) internal view returns (uint256 startAt) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4, getValueSchema());
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set startAt */
  function setStartAt(uint256 cellId, uint256 startAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((startAt)), getValueSchema());
  }

  /** Set startAt (using the specified store) */
  function setStartAt(IStore _store, uint256 cellId, uint256 startAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((startAt)), getValueSchema());
  }

  /** Get endAt */
  function getEndAt(uint256 cellId) internal view returns (uint256 endAt) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5, getValueSchema());
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get endAt (using the specified store) */
  function getEndAt(IStore _store, uint256 cellId) internal view returns (uint256 endAt) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5, getValueSchema());
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set endAt */
  function setEndAt(uint256 cellId, uint256 endAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((endAt)), getValueSchema());
  }

  /** Set endAt (using the specified store) */
  function setEndAt(IStore _store, uint256 cellId, uint256 endAt) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((endAt)), getValueSchema());
  }

  /** Get the full data */
  function get(uint256 cellId) internal view returns (CellsTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, uint256 cellId) internal view returns (CellsTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    uint256 cellId,
    uint16 x,
    uint16 y,
    ElementType cType,
    bool isRented,
    uint256 startAt,
    uint256 endAt
  ) internal {
    bytes memory _data = encode(x, y, cType, isRented, startAt, endAt);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    uint256 cellId,
    uint16 x,
    uint16 y,
    ElementType cType,
    bool isRented,
    uint256 startAt,
    uint256 endAt
  ) internal {
    bytes memory _data = encode(x, y, cType, isRented, startAt, endAt);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    _store.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using the data struct */
  function set(uint256 cellId, CellsTableData memory _table) internal {
    set(cellId, _table.x, _table.y, _table.cType, _table.isRented, _table.startAt, _table.endAt);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, uint256 cellId, CellsTableData memory _table) internal {
    set(_store, cellId, _table.x, _table.y, _table.cType, _table.isRented, _table.startAt, _table.endAt);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (CellsTableData memory _table) {
    _table.x = (uint16(Bytes.slice2(_blob, 0)));

    _table.y = (uint16(Bytes.slice2(_blob, 2)));

    _table.cType = ElementType(uint8(Bytes.slice1(_blob, 4)));

    _table.isRented = (_toBool(uint8(Bytes.slice1(_blob, 5))));

    _table.startAt = (uint256(Bytes.slice32(_blob, 6)));

    _table.endAt = (uint256(Bytes.slice32(_blob, 38)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint16 x,
    uint16 y,
    ElementType cType,
    bool isRented,
    uint256 startAt,
    uint256 endAt
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(x, y, cType, isRented, startAt, endAt);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(uint256 cellId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    return _keyTuple;
  }

  /* Delete all data for given keys */
  function deleteRecord(uint256 cellId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, uint256 cellId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(cellId));

    _store.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }
}

function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
